// Page organigramme - Gestion des effectifs
'use client';

import React, { useState, useEffect } from 'react';
import { useSession, signOut } from 'next-auth/react';
import { useRouter, usePathname } from 'next/navigation';
import { motion, AnimatePresence } from 'framer-motion';
import Sidebar from '../../components/sidebar/sidebar';
import { PlusIcon, PencilIcon, TrashIcon, XMarkIcon, ChevronDownIcon } from '@heroicons/react/24/outline';

// Définition des types
type Statut = 'Actif' | 'Non actif';

interface Effectif {
  id: number;
  prenom: string;
  nom: string;
  poste: string;
  statut: Statut;
  telephone?: string;
}

interface User extends Record<string, any> {
  guildNickname?: string;
  name?: string | null;
  email?: string | null;
  image?: string | null;
  roles?: string[];
}

// Composant de carte réutilisable
const InfoCard = ({ title, children, icon }: { title: string; children: React.ReactNode; icon: React.ReactNode }) => (
  <motion.div 
    className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-6 border border-gray-700/50 hover:border-blue-500/50 transition-all duration-300 h-full flex flex-col"
    initial={{ opacity: 0, y: 20 }}
    animate={{ opacity: 1, y: 0 }}
    transition={{ duration: 0.4 }}
  >
    <div className="flex items-center mb-4">
      <div className="p-2 bg-blue-600/20 rounded-lg mr-3">
        {icon}
      </div>
      <h3 className="text-lg font-semibold text-gray-100">{title}</h3>
    </div>
    <div className="text-gray-300 flex-1">
      {children}
    </div>
  </motion.div>
);

export default function GestionEffectifs() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const pathname = usePathname();
  const [effectifs, setEffectifs] = useState<Effectif[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [currentEffectif, setCurrentEffectif] = useState<Partial<Effectif> | null>(null);
  const [toast, setToast] = useState({ show: false, message: '', type: 'success' });

  // Gestion sécurisée de la session utilisateur
  const user = session?.user as User | undefined;
  const displayName = user?.guildNickname || user?.name || 'Utilisateur';
  const initials = displayName
    .split(' ')
    .map((n: string) => n[0])
    .join('')
    .toUpperCase()
    .slice(0, 2);
    
  // Vérifier si l'utilisateur a le rôle requis pour la gestion des effectifs
  const canManageStaff = user?.roles?.includes('1331527328219529216') || false;

  // Déconnexion automatique toutes les heures
  useEffect(() => {
    const timer = setInterval(() => {
      signOut({
        callbackUrl: '/',
      });
    }, 60 * 60 * 1000);

    return () => clearInterval(timer);
  }, []);

  // Vérification de l'authentification
  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/');
    } else if (status === 'authenticated') {
      loadEffectifs();
    }
  }, [status, router]);

  // Charger les effectifs
  const loadEffectifs = async () => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/effectifs');
      if (!response.ok) throw new Error('Erreur lors du chargement des effectifs');
      const data = await response.json();
      setEffectifs(data);
    } catch (error) {
      console.error('Erreur:', error);
      showToast('Erreur lors du chargement des effectifs', 'error');
    } finally {
      setIsLoading(false);
    }
  };

  // Afficher un message toast
  const showToast = (message: string, type: 'success' | 'error' = 'success') => {
    setToast({ show: true, message, type });
    setTimeout(() => setToast(prev => ({ ...prev, show: false })), 5000);
  };

  // Ouvrir le modal d'ajout
  const handleAddClick = () => {
    setCurrentEffectif({
      prenom: '',
      nom: '',
      poste: '',
      statut: 'Actif',
      telephone: ''
    });
    setIsEditing(false);
    setIsModalOpen(true);
  };

  // Ouvrir le modal d'édition
  const handleEditClick = (effectif: Effectif) => {
    setCurrentEffectif({ ...effectif });
    setIsEditing(true);
    setIsModalOpen(true);
  };

  // Gérer la soumission du formulaire
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!currentEffectif) return;

    const { prenom, nom, poste, statut, telephone } = currentEffectif;
    if (!prenom || !nom || !poste || !statut) {
      showToast('Veuillez remplir tous les champs obligatoires', 'error');
      return;
    }

    try {
      const url = isEditing && currentEffectif.id 
        ? `/api/effectifs/${currentEffectif.id}`
        : '/api/effectifs';
      
      const method = isEditing ? 'PUT' : 'POST';
      
      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ prenom, nom, poste, statut, telephone })
      });

      if (!response.ok) throw new Error('Erreur lors de la sauvegarde');
      
      showToast(
        isEditing ? 'Effectif mis à jour avec succès' : 'Effectif ajouté avec succès',
        'success'
      );
      
      setIsModalOpen(false);
      loadEffectifs();
    } catch (error) {
      console.error('Erreur:', error);
      showToast('Erreur lors de la sauvegarde', 'error');
    }
  };

  // Supprimer un effectif
  const handleDelete = async (id: number) => {
    if (!confirm('Êtes-vous sûr de vouloir supprimer cet effectif ?')) return;
    
    try {
      const response = await fetch(`/api/effectifs/${id}`, { method: 'DELETE' });
      if (!response.ok) throw new Error('Erreur lors de la suppression');
      
      showToast('Effectif supprimé avec succès', 'success');
      loadEffectifs();
    } catch (error) {
      console.error('Erreur:', error);
      showToast('Erreur lors de la suppression', 'error');
    }
  };

  // Gérer les changements des champs du formulaire
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    if (!currentEffectif) return;
    
    const { name, value } = e.target;
    setCurrentEffectif({
      ...currentEffectif,
      [name]: value
    });
  };

  // Formater la date d'arrivée
  const formatDate = (dateString: string) => {
    const options: Intl.DateTimeFormatOptions = { 
      day: '2-digit', 
      month: '2-digit', 
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    };
    return new Date(dateString).toLocaleDateString('fr-FR', options);
  };

  if (status === 'loading' || isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // Suppression de la déclaration en double de displayName et initials

  return (
    <div className="min-h-screen text-white flex">
      <Sidebar displayName={displayName} initials={initials} />
      <div className="flex-1 ml-[270px] relative z-10">
        {/* En-tête */}
        <header className="bg-gray-900/80 backdrop-blur-md border-b border-gray-800 sticky top-0 z-10">
          <div className="container mx-auto px-6 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <a href="/accueil"><img src="/crslogo.svg" alt="Logo CRS" className="h-10 w-auto" /></a>
                <a href="/accueil" className="text-xl font-bold bg-gradient-to-r from-blue-400 to-blue-600 bg-clip-text text-transparent">
                  Intranet CRS
                </a>
              </div>
              <div className="hidden md:flex items-center space-x-6">
                <span className="text-gray-300 text-sm">Connecté en tant que: <span className="text-blue-400 font-medium">{displayName}</span></span>
              </div>
            </div>
          </div>
        </header>

        {/* Contenu principal */}
        <main className="container mx-auto px-6 py-8">
          <div className="flex justify-between items-center mb-8">
            <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-400 to-blue-600 bg-clip-text text-transparent">
              Gestion des effectifs {totalMembers || 0}
            </h1>
            {canManageStaff && (
              <motion.button
                onClick={handleAddClick}
                className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center transition-colors duration-200"
                whileHover={{ scale: 1.03 }}
                whileTap={{ scale: 0.98 }}
              >
                <PlusIcon className="h-5 w-5 mr-2" />
                Ajouter un membre
              </motion.button>
            )}
          </div>

          {/* Tableau des effectifs */}
          <motion.div 
            className="bg-gray-800/50 backdrop-blur-sm rounded-xl border border-gray-700/50 overflow-hidden"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.4 }}
          >
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-700">
                <thead className="bg-gray-700/50">
                  <tr>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                      Nom
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                      Poste
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                      Téléphone
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                      Statut
                    </th>
                    <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-300 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-gray-800/50 divide-y divide-gray-700">
                  {effectifs.length === 0 ? (
                    <tr>
                      <td colSpan={6} className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center">
                        Aucun effectif trouvé
                      </td>
                    </tr>
                  ) : (
                    // Trier les effectifs par ordre hiérarchique des postes
                    [...effectifs]
                      .sort((a, b) => {
                        // Définir l'ordre de priorité des postes
                        const postePriorite: Record<string, number> = {
                          'Directeur': 1,
                          'Responsable': 2,
                          'Responsable Adjoint': 3,
                          'Formateur': 4,
                          'Confirmé': 5,
                          'Stagiaire': 6
                        };
                        
                        // Trier d'abord par priorité de poste, puis par nom de famille
                        const prioriteA = postePriorite[a.poste] || 7;
                        const prioriteB = postePriorite[b.poste] || 7;
                        
                        if (prioriteA !== prioriteB) {
                          return prioriteA - prioriteB;
                        }
                        
                        // Si même poste, trier par nom de famille
                        return a.nom.localeCompare(b.nom);
                      })
                      .map((effectif) => (
                      <motion.tr 
                        key={effectif.id} 
                        className="hover:bg-gray-700/30 transition-colors"
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        transition={{ duration: 0.3 }}
                      >
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="flex items-center">
                            <div className="flex-shrink-0 h-10 w-10 rounded-full bg-blue-600/20 flex items-center justify-center text-blue-400 font-medium">
                              {effectif.prenom[0]}{effectif.nom[0]}
                            </div>
                            <div className="ml-4">
                              <div className="text-sm font-medium text-white">{effectif.prenom} {effectif.nom}</div>
                            </div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                          {effectif.poste}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                          {effectif.telephone || '-'}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                            effectif.statut === 'Actif' ? 'bg-green-100/10 text-green-400 border border-green-400/30' : 'bg-red-100/10 text-red-400 border border-red-400/30'
                          }`}>
                            {effectif.statut}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                          {canManageStaff && (
                            <>
                              <button
                                onClick={() => handleEditClick(effectif)}
                                className="text-blue-400 hover:text-blue-300 mr-4"
                                title="Modifier"
                              >
                                <PencilIcon className="h-5 w-5" />
                              </button>
                              <button
                                onClick={() => handleDelete(effectif.id)}
                                className="text-red-400 hover:text-red-300"
                                title="Supprimer"
                              >
                                <TrashIcon className="h-5 w-5" />
                              </button>
                            </>
                          )}
                        </td>
                      </motion.tr>
                    ))
                  )}
                </tbody>
              </table>
            </div>
          </motion.div>

          {/* Modal d'ajout/édition - Seulement pour les utilisateurs autorisés */}
          <AnimatePresence>
            {isModalOpen && canManageStaff && (currentEffectif && (
              <>
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                  transition={{ duration: 0.2 }}
                  className="fixed inset-0 bg-black/50 backdrop-blur-sm z-40"
                  onClick={() => setIsModalOpen(false)}
                  role="dialog"
                  aria-modal="true"
                  aria-labelledby="modal-title"
                />
                <div className="fixed inset-0 z-50 flex items-center justify-center p-4 sm:p-6">
                  <motion.div
                    initial={{ opacity: 0, y: 20, scale: 0.98 }}
                    animate={{ opacity: 1, y: 0, scale: 1 }}
                    exit={{ opacity: 0, y: 20, scale: 0.98 }}
                    transition={{ type: 'spring', damping: 25, stiffness: 400 }}
                    className="relative w-full max-w-md bg-white dark:bg-gray-800 rounded-2xl shadow-2xl overflow-hidden"
                    onClick={(e) => e.stopPropagation()}
                  >
                    <div className="p-6">
                      <div className="flex items-center justify-between mb-6">
                        <h2 
                          id="modal-title"
                          className="text-xl font-bold text-gray-900 dark:text-white"
                        >
                          {isEditing ? 'Modifier un effectif' : 'Ajouter un effectif'}
                        </h2>
                        <button
                          onClick={() => setIsModalOpen(false)}
                          className="text-gray-400 hover:text-gray-500 dark:hover:text-gray-300 transition-colors"
                          aria-label="Fermer la fenêtre"
                        >
                          <XMarkIcon className="h-6 w-6" />
                        </button>
                      </div>

                      <form onSubmit={handleSubmit} className="space-y-5">
                        <div className="space-y-5">
                          <div className="relative">
                            <label 
                              htmlFor="prenom" 
                              className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                            >
                              Prénom <span className="text-red-500">*</span>
                            </label>
                            <input
                              type="text"
                              id="prenom"
                              name="prenom"
                              value={currentEffectif.prenom || ''}
                              onChange={handleChange}
                              className="block w-full rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white px-4 py-2.5 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                              required
                              autoFocus
                              aria-required="true"
                            />
                          </div>

                          <div className="relative">
                            <label 
                              htmlFor="nom" 
                              className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                            >
                              Nom <span className="text-red-500">*</span>
                            </label>
                            <input
                              type="text"
                              id="nom"
                              name="nom"
                              value={currentEffectif.nom || ''}
                              onChange={handleChange}
                              className="block w-full rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white px-4 py-2.5 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                              required
                              aria-required="true"
                            />
                          </div>

                          <div className="relative">
                            <label 
                              htmlFor="poste" 
                              className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                            >
                              Poste <span className="text-red-500">*</span>
                            </label>
                            <select
                              id="poste"
                              name="poste"
                              value={currentEffectif.poste || ''}
                              onChange={handleChange}
                              className="block w-full rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white px-4 py-2.5 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 appearance-none"
                              required
                              aria-required="true"
                            >
                              <option value="">Sélectionner un poste</option>
                              <option value="Stagiaire">Stagiaire</option>
                              <option value="Confirmé">Confirmé</option>
                              <option value="Formateur">Formateur</option>
                              <option value="Responsable Adjoint">Responsable Adjoint</option>
                              <option value="Responsable">Responsable</option>
                              <option value="Directeur">Directeur</option>
                            </select>
                            <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                              <ChevronDownIcon className="h-5 w-5 text-gray-400" />
                            </div>
                          </div>

                          <div className="relative">
                            <label 
                              htmlFor="statut" 
                              className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                            >
                              Statut <span className="text-red-500">*</span>
                            </label>
                            <select
                              id="statut"
                              name="statut"
                              value={currentEffectif.statut || 'Actif'}
                              onChange={handleChange}
                              className="block w-full rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white px-4 py-2.5 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 appearance-none"
                              required
                              aria-required="true"
                            >
                              <option value="Actif">Actif</option>
                              <option value="Non actif">Non actif</option>
                            </select>
                            <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                              <ChevronDownIcon className="h-5 w-5 text-gray-400" />
                            </div>
                          </div>

                          <div className="relative">
                            <label 
                              htmlFor="telephone" 
                              className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                            >
                              Téléphone
                            </label>
                            <div className="relative">
                              <input
                                type="tel"
                                id="telephone"
                                name="telephone"
                                value={currentEffectif.telephone || ''}
                                onChange={handleChange}
                                placeholder="+33 6 12 34 56 78"
                                pattern="^(\+33|0)[1-9]([-. ]?[0-9]{2}){4}$"
                                className="block w-full rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white px-4 py-2.5 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                              />
                              {currentEffectif.telephone && (
                                <button
                                  type="button"
                                  onClick={() => {
                                    const newEffectif = { ...currentEffectif, telephone: '' };
                                    setCurrentEffectif(newEffectif);
                                  }}
                                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
                                  aria-label="Effacer le numéro de téléphone"
                                >
                                  <XMarkIcon className="h-4 w-4" />
                                </button>
                              )}
                            </div>
                            <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">Format: +33 6 12 34 56 78 ou 0612345678</p>
                          </div>
                        </div>

                        <div className="mt-8 flex justify-end space-x-3">
                          <button
                            type="button"
                            onClick={() => setIsModalOpen(false)}
                            className="px-4 py-2.5 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
                          >
                            Annuler
                          </button>
                          <button
                            type="submit"
                            className="px-4 py-2.5 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200 flex items-center"
                          >
                            {isEditing ? (
                              <>
                                <PencilIcon className="h-4 w-4 mr-2" />
                                Mettre à jour
                              </>
                            ) : (
                              <>
                                <PlusIcon className="h-4 w-4 mr-2" />
                                Ajouter
                              </>
                            )}
                          </button>
                        </div>
                      </form>
                    </div>
                  </motion.div>
                </div>
              </>
            )
          )}
          </AnimatePresence>

          {/* Toast de notification */}
          {toast.show && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 20 }}
              className={`fixed bottom-4 right-4 px-6 py-3 rounded-lg shadow-lg flex items-center ${
                toast.type === 'error' ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'
              }`}
            >
              <span className="mr-2">{toast.message}</span>
              <button
                onClick={() => setToast(prev => ({ ...prev, show: false }))}
                className="ml-2"
              >
                <XMarkIcon className="h-5 w-5" />
              </button>
            </motion.div>
          )}
        </main>
      </div>
    </div>
    
  );
}
